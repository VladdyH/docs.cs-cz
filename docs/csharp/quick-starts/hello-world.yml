### YamlMime:Tutorial
title: <span data-ttu-id="0c7f5-101">Hello C#</span><span class="sxs-lookup"><span data-stu-id="0c7f5-101">Hello C#</span></span>
metadata:
  title: "<span data-ttu-id=\"0c7f5-102\">Hello C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-102\">Hello C#.</span></span> <span data-ttu-id=\"0c7f5-103\">Vaše první Úvod do jazyka C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-103\">Your first introduction to the C# language.</span></span>"
  description: "<span data-ttu-id=\"0c7f5-104\">V této úvodní budete používat prohlížeč další C# interaktivně.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-104\">In this quick start, you'll use your browser to learn C# interactively.</span></span> <span data-ttu-id=\"0c7f5-105\">Psaní kódu jazyka C# a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-105\">You write C# code and see the results of compiling and running your code directly in the browser.</span></span>"
  audience: Developer
  level: Beginner
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: Numbers in C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: e0ba04029605db719a06babedb989b189a478f54
  ms.sourcegitcommit: 01ea3686e74ff05e4f6de3d8d46dc603d051ec00
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 12/13/2017
items:
- durationInMinutes: 1
  content: >
    This quick start teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code. It contains a series of lessons that begin with a "Hello World" program. These lessons teach you the fundamentals of the C# language.
- title: "<span data-ttu-id=\"0c7f5-106\">Spusťte váš první program C#</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-106\">Run your first C# program</span></span>"
  durationInMinutes: 2
  content: "Run the following code in the interactive window. To do that, type the following code block in the interactive window and click the **Run** button:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nCongratulations! You've run your first C# program. It's a simple program that prints the message \"Hello World!\". It used the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method to print that message. `Console` is a type that represents the console window. `WriteLine` is a method of the `Console` type that prints a line of text to that text console.\n\nLet's move on and explore more. The rest of this lesson explores working with the `string` type, which represents text in C#. Like the `Console` type, the `string` type has methods. The `string` methods work with text. \n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "<span data-ttu-id=\"0c7f5-107\">Deklarace a používání proměnných</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-107\">Declare and use variables</span></span>"
  durationInMinutes: 3
  content: "Your first program printed the `string` \"Hello World!\" on\nthe screen. \n\n> [!TIP]\n> As you explore C# (or any programming language), you'll\n> make mistakes when you write code. The **compiler** will\n> find those errors and report them to you. When the output\n> contains error messages, look closely at the example code,\n> and the code in the interactive window to see what to fix.\n> That exercise will help you learn the structure of C# code. \n\nYour first program is limited to printing one message. You can write more\nuseful programs by using **variables**. A **variable** is a symbol you can\nuse to run the same code with different values. Let's try it! Replace the\ncode you've written in the interactive window with the following code:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nThe first line declares a variable, `aFriend` and assigns it a value, \"Bill\". The second line\nprints out the name.\n\nYou can assign different values to any variable you declare. You can change\nthe name to one of your friends. Add these two lines in the interactive window\nfollowing the code you've already added:\n\n```csharp\naFriend = \"Maria\";\nConsole.WriteLine(aFriend);\n```\n\nNotice that the same line of code prints two different messages, based on\nthe value stored in the `aFriend` variable.\n\nYou may have also noticed that the word \"Hello\" was missing in the last two messages. Let's fix\nthat now.  Modify the lines that print the message to the following:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nClick **Run** again to see the results.\n\nAs we progress, creating strings to print using `+` becomes cumbersome. String interpolation lets you piece together strings in a more concise and readable way.\n\nIf you add a `$` before the opening quotes of the string, you can then include string expressions, like the `aFriend` variable, inside the string in curly brackets.\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nClick **Run** again to see the results.\n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "<span data-ttu-id=\"0c7f5-108\">Práce s řetězci</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-108\">Work with strings</span></span>"
  durationInMinutes: 5
  content: >
    Your last edit was our first look at what you can do with strings. Let's explore more.


    The `+` is called an operator in C#. When applied to strings like `firstString + secondString`, a new string is created with the text from the first followed by the text from the second. This is referred to as *string concatenation*. You can combine any number of strings, including string variables.  Try this:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    As you explore more with strings, you can find the length of a string using `Length`. `Length` is a **property** of a string and it returns the number of characters in that string. Add the following code at the bottom of the interactive window:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > This is a good time to explore on your own. You've learned that `Console.WriteLine()`

    > writes text to the screen. You've learned how to declare variables and

    > concatenate strings together. Experiment in the interactive window. Write

    > some more messages yourself. Build strings using the `+` operator.


    > [!NOTE]

    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- title: "<span data-ttu-id=\"0c7f5-109\">Více s řetězce</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-109\">Do more with strings</span></span>"
  durationInMinutes: 5
  content: "You've been using a **method**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, to print messages. A **method** is a block of code that implements some action. It has a name, so you can access it. \n\nThe `string` type has many useful methods. Let's explore the <xref:System.String.Trim%2A> method, and related methods <xref:System.String.TrimStart%2A> and <xref:System.String.TrimEnd%2A>. These methods remove leading and trailing spaces:\n\n```csharp\nstring message = \"      Hello World!       \";\nConsole.WriteLine($\"[{message}]\");\n\nstring trimmedMessage = message.TrimStart();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.TrimEnd();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.Trim();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n```\n\nThis sample reinforces a couple of important concepts for working with strings. The methods that manipulate strings return new string objects rather than making modifications in place. You can see that each call to any of the `Trim` methods returns a new string, but does not change the original message.\n\nThere are other methods available to work with a string. For example, you've probably used a search and replace command in an editor or word processor. The <xref:System.String.Replace%2A> method does something similar in a `string`. It searches for a substring, and replaces it with different text. The <xref:System.String.Replace%2A> method takes two **parameters**. These are the strings between the parentheses. The first string is the text to search for. The second string is the text to replace it with. Try it for yourself. Add this code:\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nmessage = message.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(message);\n```\n\nTwo other useful methods make a string ALL CAPS or all lower case. Try the following code:\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nConsole.WriteLine(message.ToUpper());\nConsole.WriteLine(message.ToLower());\n```\n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "<span data-ttu-id=\"0c7f5-110\">Hledání řetězců</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-110\">Search strings</span></span>"
  durationInMinutes: 10
  content: "The other part of a *search and replace* operation is to find text in a\nstring. You can use the  <xref:System.String.Contains%2A> method for searching. It\ntells you if a string contains a substring inside it. Try the following\ncode to explore <xref:System.String.Contains%2A>:\n\n```csharp\nstring message = \"You say goodbye, and I say hello\";\nConsole.WriteLine(message.Contains(\"goodbye\"));\nConsole.WriteLine(message.Contains(\"greetings\"));\n```\n\nThe <xref:System.String.Contains%2A> method returns a **boolean** value which tells you if the\nstring you were searching for was found. A **boolean** stores either a `true` or a\n`false` value. You'll learn more about **boolean** values\nin a later lesson.\n\n***Challenge***\n\nThere are two similar methods, <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> that also search for sub-strings in a string. These find a substring at the beginning or the\nend of the string. Try to modify the previous sample to use <xref:System.String.StartsWith%2A> and\n<xref:System.String.EndsWith%2A> instead of <xref:System.String.Contains%2A>. Search for \"You\" or \"goodbye\" at the beginning of a string. Search for \"hello\" or \"goodbye\" at the end of a string.\n\n> [!Note]\n> Watch your punctuation when you test for the text at the end of the string. If the string\n> ends with a period, you must check for a string that ends with a period.\n\nYou should get `true` for starting with \"You\" and ending with \"hello\" and false for starting with or ending with \"goodbye\". \n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "<span data-ttu-id=\"0c7f5-111\">Dokončení výzvy</span><span class=\"sxs-lookup\"><span data-stu-id=\"0c7f5-111\">Complete challenge</span></span>"
  durationInMinutes: 3
  content: >
    Did you come up with something like this?


    ```csharp

    string message = "You say goodbye, and I say hello";

    Console.WriteLine(message.StartsWith("You"));

    Console.WriteLine(message.StartsWith("goodbye"));


    Console.WriteLine(message.EndsWith("hello"));

    Console.WriteLine(message.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- content: "You've completed the \"Hello C#\" quick start.\n\nYou can learn more about working with the `string` type in the\n[C# Programming Guide](../programming-guide/index.md) topic on [strings](../programming-guide/strings/index.md).\0"
