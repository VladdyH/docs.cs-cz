### YamlMime:Tutorial
title: Hello C#
metadata:
  title: Interaktivní kurz Hello World – rychlé starty s C#
  description: V tomto rychlém startu použijete prohlížeče interaktivně učit C#. Napíšete kód v C# a zobrazovat výsledky kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.topic: quickstart
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Čísla v C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 17264f96676b5c81c8a70a6606de698406c076fb
  ms.sourcegitcommit: efff8f331fd9467f093f8ab8d23a203d6ecb5b60
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 09/01/2018
  ms.locfileid: "43402811"
items:
- durationInMinutes: 1
  content: >
    V tomto rychlém startu se naučíte, C# interaktivně, pomocí prohlížeče napíšete C# a potom si výsledky kompilace a spuštění kódu. Obsahuje sérii lekcí, které začínají programem "Hello World". Tato lekce vás naučí základy jazyka C#.
- title: Spuštění prvního programu jazyka C#
  durationInMinutes: 2
  content: "Spusťte v interaktivním okně následující kód. K tomu, zadejte do interaktivního okna následující blok kódu a klikněte na tlačítko **spustit** tlačítka:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nBlahopřejeme! Jste spustili svůj první program C#. Je jednoduchý program, který zobrazí zprávu \"Hello World!\". Používá se <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodu pro zobrazení této zprávy. `Console` je typ, který představuje okno konzoly. `WriteLine` je metoda `Console` , která zobrazí text této textové konzole řádek.\n\nTeď přejdeme a prozkoumat další. Zbytek této lekce se zabývá prací s `string` typ, který představuje text v jazyce C#. Podobně jako `Console` typ, `string` typ má metody. `string` Metody práce s textem. \n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Deklarace a používání proměnných
  durationInMinutes: 3
  content: "Váš první program vytisknout `string` \"Hello World!\" na obrazovce. \n\n> [!TIP]\n> Když se budete učit, C# (nebo libovolným programovacím jazykem), budete se při psaní kódu dělat chyby. **Kompilátoru** se tyto chyby odhalí a dejte nám o nich na vás. Pokud výstup obsahuje chybové zprávy, prohlédněte si blíže ukázkový kód a kód v interaktivním okně, abyste zjistili, co je opravit.\n> Toto cvičení vám pomůže seznámit se se strukturou kódu jazyka C#. \n\nVáš první program se omezuje na zobrazení jedné určité zprávy. Můžete napsat užitečnější programy pomocí **proměnné**. A **proměnnou** je symbol, můžete spustit stejný kód s různými hodnotami. Pojďme si to vyzkoušet! Nahraďte kód, který jste napsali v interaktivním okně následující kód:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nPrvní řádek deklaruje proměnnou `aFriend` a přiřazuje jí hodnotu \"Bill\". Druhý řádek vytiskne název.\n\nVšechny deklarované proměnné můžete přiřadit různé hodnoty. Změňte název na některého ze svých přátel. Přidejte následující dva řádky v interaktivním okně následující kód, který jste už přidali:\n\n```csharp\naFriend = \"Maira\";\nConsole.WriteLine(aFriend);\n```\n\nVšimněte si, že stejný řádek kódu vytiskne dvě různé zprávy podle hodnoty uložené v `aFriend` proměnné.\n\nMůžete také všimnout, že se v posledních dvou zprávách chybí slovo \"Hello\". Pojďme to napravit.  Upravte řádky, které zobrazují zprávu následující:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nKlikněte na tlačítko **spustit** znovu, abyste viděli výsledek.\n\nJak jsme průběh, vytváření řetězců k zobrazení pomocí `+` stane náročné. [Interpolace řetězců](../language-reference/tokens/interpolated.md) umožňuje můžete skládat řetězce dohromady stručnějším a čitelnějším způsobem.\n\nPokud chcete přidat `$` před počáteční uvozovky řetězce, pak můžete vložit výrazy, jako je třeba `aFriend` proměnná řetězce ve složených závorkách.\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nKlikněte na tlačítko **spustit** znovu, abyste viděli výsledek.\n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Práce s řetězci
  durationInMinutes: 5
  content: >
    Poslední úpravy se naši první pohled na co můžete dělat s řetězci. Podívejme se na další.


    `+` v jazyce C# se říká operátor. Při použití na řetězce, jako jsou `firstString + secondString`, je vytvořen nový řetězec s textem prvního, za nímž následuje text druhého. To se označuje jako *zřetězení řetězců*. Můžete zkombinovat libovolný počet řetězců včetně proměnných řetězců.  Zkuste tohle:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Jak při seznamování s prací s řetězci, zjistíte délku řetězce pomocí `Length`. `Length` je **vlastnost** z řetězce, která vrátí počet znaků daného řetězce. V dolní části interaktivního okna přidejte následující kód:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Toto je vhodná doba k prozkoumání sami. Když jste se naučili, který `Console.WriteLine()` zapíše text do obrazovky. Jste zjistili, jak deklarovat proměnné a řetězit řetězce. Vyzkoušet v interaktivním okně. Zápis nějaké další zprávy. Sestavujte řetězce pomocí `+` operátor.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Další úkony s řetězci
  durationInMinutes: 5
  content: "Zatím jste používali **metoda**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, která zobrazuje zprávy. A **metoda** je blok kódu, který implementuje určitou akci. Má název, takže k němu máte přístup. \n\n`string` Typ nabízí spoustu užitečných metod. Podívejme se <xref:System.String.Trim%2A> metodu a související metody <xref:System.String.TrimStart%2A> a <xref:System.String.TrimEnd%2A>. Tyto metody odstraní úvodní a koncové mezery:\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\nTato ukázka posiluje pár důležitých konceptů, při práci s řetězci. Metody pro manipulaci s řetězci vrací nové objekty namísto úpravy. Vidíte, že každé volání kterékoli z `Trim` metody vrátí nový řetězec, ale původní zprávu nezmění.\n\nExistují další metody pro práci s řetězci. Například pravděpodobně využili vyhledávání a nahradit příkaz v nějakém editoru nebo textovém editoru. <xref:System.String.Replace%2A> Metoda provede něco podobného v `string`. Vyhledá dílčí řetězec a nahradí ho jiným textem. <xref:System.String.Replace%2A> Metoda má dva **parametry**. Toto jsou řetězce v závorkách. První řetězec, který je hledaný text. Druhý řetězec je text, který má nahradit. Vyzkoušejte si to sami. Přidejte tento kód:\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\nDalší dvě užitečné metody Ujistěte se, všechna velká mají standardní řetězec nebo text malými písmeny. Vyzkoušejte následující kód:\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Hledání řetězců
  durationInMinutes: 10
  content: "Druhá část *vyhledávání a nahrazení* je operace hledání textu v řetězci. Můžete použít <xref:System.String.Contains%2A> metodu pro hledání. Zjistíte, jestli některý řetězec obsahuje určitý dílčí řetězec. Následující kód k prozkoumání <xref:System.String.Contains%2A>:\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\n<xref:System.String.Contains%2A> Metoda vrátí hodnotu **logická** hodnotu, která udává, pokud byl nalezen řetězec jste hledali. A **logická** ukládá buď `true` nebo `false` hodnotu. Získáte další informace o **logická** hodnoty v některé z pozdějších lekcí.\n\n***Výzvy***\n\nExistují dvě podobné metody <xref:System.String.StartsWith%2A> a <xref:System.String.EndsWith%2A> hledání dílčích řetězců v řetězci. Ty vyhledají dílčí řetězec na začátku nebo konci řetězce. Zkuste upravit předchozí ukázku použít <xref:System.String.StartsWith%2A> a <xref:System.String.EndsWith%2A> místo <xref:System.String.Contains%2A>. Vyhledejte \"Vás\" nebo \"goodbye\" na začátku řetězce. Vyhledejte \"hello\" nebo \"goodbye\" na konci řetězce.\n\n> [!Note]\n> Podívejte se na vaše interpunkční znaménka při testování textu na konci řetězce. Pokud řetězec končí tečkou, musíte hledat řetězec končící tečkou.\n\nMěli byste obdržet `true` pro spuštění \"You\" a končící na \"hello\" a hodnotu false pro začíná nebo končí \"goodbye\". \n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Dokončení výzvy
  durationInMinutes: 3
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Dokončili jste rychlý start "Hello C#".


    Další informace o práci s `string` zadejte [Průvodce programováním v C#](../programming-guide/index.md) téma na [řetězce](../programming-guide/strings/index.md).

    [Jak tipy pro práci s řetězci](../how-to/index.md#working-with-strings).
