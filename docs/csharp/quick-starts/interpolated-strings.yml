### YamlMime:Tutorial
title: <span data-ttu-id="a28c0-101">Interpolace řetězce v jazyce C#</span><span class="sxs-lookup"><span data-stu-id="a28c0-101">String interpolation in C#</span></span>
metadata:
  title: Řetězec interpolace Interaktivní kurz – elementy QuickStart C#
  description: V tomto kurzu pomocí prohlížeče interaktivně prozkoumat funkce interpolace řetězec jazyka C#. Psaní kódu jazyka C# a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="a28c0-105">Kolekce v jazyce C#</span><span class="sxs-lookup"><span data-stu-id="a28c0-105">Collections in C#</span></span>
  ms.openlocfilehash: b5db200ea9878368594a900221d11337715fb1f4
  ms.sourcegitcommit: 77d9a94dac4c05827ed0663d95e0f9ad35d6682e
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/24/2018
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="a28c0-106">Tento rychlý start se naučíte, jak používat [řetězec interpolace](../language-reference/tokens/interpolated.md) vložení hodnoty do jednoho řetězce.</span><span class="sxs-lookup"><span data-stu-id="a28c0-106">This quickstart teaches you how to use [string interpolation](../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="a28c0-107">Můžete také zjistěte, jak řídit textové reprezentace tyto hodnoty ve výsledném řetězci.</span><span class="sxs-lookup"><span data-stu-id="a28c0-107">You also learn how to control text representations of those values in the result string.</span></span> <span data-ttu-id="a28c0-108">Použití prohlížeče pro zápis a spouštění kódu C# a okamžitě vidí vytvořené výsledky.</span><span class="sxs-lookup"><span data-stu-id="a28c0-108">You use your browser to write and run C# code and can immediately see the produced results.</span></span>
- title: <span data-ttu-id="a28c0-109">Vytvoření interpolované řetězce</span><span class="sxs-lookup"><span data-stu-id="a28c0-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"a28c0-110\">Spusťte následující kód v okně interaktivní.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"a28c0-111\">K tomu, zadejte kód v okně interaktivní (Nahraďte `\\<name>` nahraďte názvem) a vyberte **spustit**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-111\">To do that, type the code in the interactive window (replace `\\<name>` with your name) and select **Run**:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"a28c0-112\">Při spuštění kódu, **výstup** zobrazí řetězec, který obsahuje název vaší v pozdrav.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-112\">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id=\"a28c0-113\">Argument řetězce <xref:System.Console.WriteLine%2A> volání metody, které je *interpolované řetězce*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-113\">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"a28c0-114\">Je typ šablony, která umožňuje vytvořit jeden řetězec (volat *způsobit řetězec*) z řetězce, který obsahuje integrovaný kód.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-114\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"a28c0-115\">Interpolované řetězce jsou obzvláště užitečná pro vložení hodnoty do řetězec nebo zřetězení (spojení) několik řetězců.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-115\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span> \n\n<span data-ttu-id=\"a28c0-116\">V předchozím příkladu obsahuje dva elementy, které musí mít každý interpolované řetězce:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-116\">The example above contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"a28c0-117\">Řetězcový literál, který začíná `$` znak před jeho otevření nabídky označit znak.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-117\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"a28c0-118\">Nesmí být žádné mezery mezi `$` symbolů a znak uvozovky.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-118\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"a28c0-119\">(Pokud byste chtěli vidět co se stane, když obsahují jeden, mezeru po vložení `$` znak v okně interaktivní a spusťte aktualizovaný kódu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-119\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id=\"a28c0-120\">Kompilátor jazyka C# complains, \"Neočekávaný znak\"$\"\".)</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-120\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"a28c0-121\">Jeden nebo více *interpolované výrazy*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-121\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"a28c0-122\">Interpolované výrazu je indikován otevírací a uzavírací závorku (`{` a `}`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-122\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"a28c0-123\">Můžete vložit jakékoli C# výraz, který vrací hodnotu (včetně `null`) uvnitř složené závorky.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-123\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"a28c0-124\">Nyní si vyzkoušíte několik další příklady interpolace řetězce, pomocí některé jiné datové typy.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-124\">Let's try a few more string interpolation examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a28c0-125\">Toto online kódování prostředí je v režimu preview.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-125\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a28c0-126\">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-126\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="a28c0-127">Zahrnout různé datové typy</span><span class="sxs-lookup"><span data-stu-id="a28c0-127">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"a28c0-128\">V předchozím kroku použít řetězec interpolace vložit jeden řetězec uvnitř jiného.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-128\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"a28c0-129\">Výsledek interpolované výraz může být jakékoli datového typu, ale.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-129\">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id=\"a28c0-130\">Umožňuje zahrnout hodnoty různých datových typů v interpolované řetězce.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-130\">Let's include values of various data types in an interpolated string.</span></span> \n\n<span data-ttu-id=\"a28c0-131\">V následujícím příkladu se nejdřív jsme definovali [– třída](../programming-guide/classes-and-structs/classes.md) datový typ `Vegetable` který má `Name` [vlastnost](../properties.md) a `ToString` [metoda](../methods.md), které [přepsání](../language-reference/keywords/override.md) chování <xref:System.Object.ToString?displayProperty=nameWithType> metoda.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-131\">In the following example, first, we define a [class](../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has the `Name` [property](../properties.md) and the `ToString` [method](../methods.md), which [overrides](../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"a28c0-132\">[ `public` – Modifikátor přístupu](../language-reference/keywords/public.md) zpřístupní dané metody žádný kód klienta získat řetězcovou reprezentaci `Vegetable` instance.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-132\">The [`public` access modifier](../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id=\"a28c0-133\">V příkladu `Vegetable.ToString` metoda vrátí hodnotu `Name` vlastnost, která je inicializován v `Vegetable` [konstruktor](../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-133\">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id=\"a28c0-134\">Poté vytvoříme instanci `Vegetable` pomocí [ `new` – klíčové slovo](../language-reference/keywords/new-operator.md) a poskytuje název parametr pro konstruktor `Vegetable`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-134\">Then we create an instance of the `Vegetable` class by using [`new` keyword](../language-reference/keywords/new-operator.md) and providing a name parameter for the constructor `Vegetable`.</span></span> <span data-ttu-id=\"a28c0-135\">Nakonec zahrnuta do interpolované řetězce, který taky obsahuje tuto instanci <xref:System.DateTime> hodnotu, <xref:System.Decimal> hodnotu a `Unit` [výčtu](../programming-guide/enumeration-types.md) hodnotu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-135\">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id=\"a28c0-136\">V okně interaktivní spusťte následující kód:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-136\">Run the following code in the interactive window:</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, pound, ounce, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\n<span data-ttu-id=\"a28c0-137\">Všimněte si, že interpolované výraz `item` interpolované řetězce přeloží na text \"Lilek\" ve výsledném řetězci.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-137\">Note that the interpolated expression `item` in the interpolated string resolves to the text \"eggplant\" in the result string.</span></span> <span data-ttu-id=\"a28c0-138\">Důvodem je, že pokud typ výsledku výrazu není řetězec, výsledek je přeložit na řetězec následujícím způsobem:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-138\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"a28c0-139\">Pokud je výsledkem výrazu interpolované `null`, prázdný řetězec (\"\", nebo <xref:System.String.Empty?displayProperty=nameWithType>) se používá.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-139\">If the interpolated expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"a28c0-140\">Pokud není vyhodnocení interpolované výraz `null`, obvykle `ToString` je volána metoda typ výsledku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-140\">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id=\"a28c0-141\">Toto můžete otestovat aktualizací implementace `Vegetable.ToString` metoda.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-141\">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id=\"a28c0-142\">Nemusí i potřebujete implementovat `ToString` metoda vzhledem k tomu, že každý typ má některé implementace této metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-142\">You might not even need to implement the `ToString` method since every type has some implementation of this method.</span></span> <span data-ttu-id=\"a28c0-143\">Abyste to mohli otestovat, komentář definice `Vegetable.ToString` metoda v příkladu (k tomu, put symbol komentáře `//`, úrovních před ním).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-143\">To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it).</span></span> <span data-ttu-id=\"a28c0-144\">Ve výstupu řetězec \"Lilek\" nahrazuje plně kvalifikovaného názvu (obor názvů definované REPL C# spolu se název typu), což je výchozí chování z <xref:System.Object.ToString?displayProperty=nameWithType> metoda.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-144\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"a28c0-145\">Výchozí chování `ToString` metodou pro hodnotu výčtu je vrátí řetězcovou reprezentaci hodnoty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-145\">The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value.</span></span>    \n\n<span data-ttu-id=\"a28c0-146\">Ve výstupu z tohoto příkladu datum je příliš přesné (cenu lilek nemění za sekundu) a hodnotu ceny neznamená jednotku měny.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-146\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"a28c0-147\">V dalším kroku dozvíte, jak vyřešit tyto problémy kontrolou formát řetězcové vyjádření výsledků výrazu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-147\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a28c0-148\">Toto online kódování prostředí je v režimu preview.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-148\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a28c0-149\">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-149\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="a28c0-150">Ovládací prvek formátování interpolované výrazy</span><span class="sxs-lookup"><span data-stu-id="a28c0-150">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="a28c0-151">V předchozím kroku byly dva řetězce chybně formátovaný vložena do řetězce výsledek.</span><span class="sxs-lookup"><span data-stu-id="a28c0-151">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="a28c0-152">Jeden se hodnoty data a času, pro kterou se příslušná pouze datum.</span><span class="sxs-lookup"><span data-stu-id="a28c0-152">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="a28c0-153">Druhá se ceny, které nebylo signalizovat jeho jednotku měny.</span><span class="sxs-lookup"><span data-stu-id="a28c0-153">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="a28c0-154">Obě tyto chyby lze snadno adresu.</span><span class="sxs-lookup"><span data-stu-id="a28c0-154">Both issues are easy to address.</span></span> <span data-ttu-id="a28c0-155">Řetězec interpolace umožňuje určit *řetězce formátu* které řídí formátování konkrétní typy.</span><span class="sxs-lookup"><span data-stu-id="a28c0-155">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="a28c0-156">Upravit volání `Console.WriteLine` z předchozího příkladu zahrnout řetězce formátu pro data a cena výrazy, jak je znázorněno na následujícím řádku:</span><span class="sxs-lookup"><span data-stu-id="a28c0-156">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="a28c0-157">Zadejte řetězec, ve formátu podle interpolované výraz s dvojtečkou (":") a řetězec formátu.</span><span class="sxs-lookup"><span data-stu-id="a28c0-157">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="a28c0-158">"d" je [řetězec formátu standardní hodnoty data a času](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) představující formát krátkého data.</span><span class="sxs-lookup"><span data-stu-id="a28c0-158">"d" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="a28c0-159">Je "C2" [standardního řetězce formátu čísel](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) představující číslo jako hodnotu měny s dvě číslice za desetinnou čárkou.</span><span class="sxs-lookup"><span data-stu-id="a28c0-159">"C2" is a [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="a28c0-160">Počet typů v na knihovny .NET podporují předdefinovanou sadu řetězce formátu.</span><span class="sxs-lookup"><span data-stu-id="a28c0-160">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="a28c0-161">Mezi ně patří všechny číselnými typy a typy data a času.</span><span class="sxs-lookup"><span data-stu-id="a28c0-161">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="a28c0-162">Úplný seznam typů, které podporují řetězce formátu najdete v tématu [řetězce formátu a typy knihovna tříd rozhraní .NET](../../standard/base-types/formatting-types.md#stringRef) v [typy formátování v .NET](../../standard/base-types/formatting-types.md) článku.</span><span class="sxs-lookup"><span data-stu-id="a28c0-162">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="a28c0-163">Zkuste upravit řetězce formátu v příkladu zobrazíte jejich vlivu formátování data a času a číselná hodnota.</span><span class="sxs-lookup"><span data-stu-id="a28c0-163">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="a28c0-164">Změňte "d" v `{date:d}` k "t" (zobrazíte na formát krátkého času), "y" (zobrazíte za rok a měsíc) a "rrrr" (pro zobrazení v roce jako čtyřmístné číslo).</span><span class="sxs-lookup"><span data-stu-id="a28c0-164">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="a28c0-165">Změňte "C2" v `{price:C2}` "e" (pro exponenciální zápis) a "F3" (pro číselná hodnota se tři číslice za desetinnou čárkou).</span><span class="sxs-lookup"><span data-stu-id="a28c0-165">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="a28c0-166">Kromě řízení, formátování, můžete také ovládat šířku pole a zarovnání formátované řetězce, které jsou zahrnuté ve výsledném řetězci.</span><span class="sxs-lookup"><span data-stu-id="a28c0-166">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="a28c0-167">V dalším kroku dozvíte, jak to provést.</span><span class="sxs-lookup"><span data-stu-id="a28c0-167">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="a28c0-168">Toto online kódování prostředí je v režimu preview.</span><span class="sxs-lookup"><span data-stu-id="a28c0-168">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a28c0-169">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a28c0-169">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="a28c0-170">Řídit šířku pole a zarovnání interpolované výrazů</span><span class="sxs-lookup"><span data-stu-id="a28c0-170">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="a28c0-171">Normálně Pokud je výsledkem výrazu interpolované formátována na řetězec, tento řetězec je součástí výsledný řetězec bez počáteční nebo koncové mezery.</span><span class="sxs-lookup"><span data-stu-id="a28c0-171">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="a28c0-172">Zejména při práci s sadu dat, bude možné řídit šířku pole a zarovnání textu pomáhá k vytváření srozumitelnější výstupu.</span><span class="sxs-lookup"><span data-stu-id="a28c0-172">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="a28c0-173">Chcete-li vidět, spusťte následující kód:</span><span class="sxs-lookup"><span data-stu-id="a28c0-173">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="a28c0-174">Názvy položek jsou zarovnaný doleva a jejich počty zarovnaný doprava.</span><span class="sxs-lookup"><span data-stu-id="a28c0-174">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="a28c0-175">Zadejte zarovnání přidáním čárkou (",") po interpolované výrazu a určení *minimální* pole Šířka.</span><span class="sxs-lookup"><span data-stu-id="a28c0-175">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="a28c0-176">Pokud zadaná hodnota je kladné číslo, je pole zarovnaný doprava.</span><span class="sxs-lookup"><span data-stu-id="a28c0-176">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="a28c0-177">Pokud je na záporné číslo, pole je zarovnaný doleva.</span><span class="sxs-lookup"><span data-stu-id="a28c0-177">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="a28c0-178">Zkuste odebrat záporné přihlásí z `{"Item",-25}` a `{item.Key,-25}` kód a znovu spusťte v příkladu.</span><span class="sxs-lookup"><span data-stu-id="a28c0-178">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="a28c0-179">Tentokrát názvy položek jsou zarovnaný doprava.</span><span class="sxs-lookup"><span data-stu-id="a28c0-179">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="a28c0-180">Můžete kombinovat specifikace zarovnání a řetězec formátu pro jeden výraz interpolované.</span><span class="sxs-lookup"><span data-stu-id="a28c0-180">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="a28c0-181">K tomu, zadejte zarovnání nejprve následovaný dvojtečkou a řetězec formátu.</span><span class="sxs-lookup"><span data-stu-id="a28c0-181">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="a28c0-182">Zkuste následující kód, který zobrazuje tři formátované řetězce s šířky definovaných polí:</span><span class="sxs-lookup"><span data-stu-id="a28c0-182">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="a28c0-183">Toto online kódování prostředí je v režimu preview.</span><span class="sxs-lookup"><span data-stu-id="a28c0-183">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a28c0-184">Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a28c0-184">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: "<span data-ttu-id=\"a28c0-185\">Jste dokončili rychlé spuštění interpolace řetězec.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-185\">You've completed the string interpolation quickstart.</span></span> \n\n<span data-ttu-id=\"a28c0-186\">Tyto elementy QuickStart můžete pokračovat ve svém vlastním místním vývojovém prostředí.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-186\">You can continue these quickstarts in your own local development environment.</span></span> <span data-ttu-id=\"a28c0-187\">Seznámíte se základy [místní vývoj](local-environment.md) a pak vyberte rychlý start.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-187\">Learn the basics of [local development](local-environment.md) and then pick a quickstart.</span></span> <span data-ttu-id=\"a28c0-188\">Zkuste tento stejný rychlý start, přímo na další rychlý start nebo znovu spustit s [čísla v jazyce C#](numbers-in-csharp-local.md) rychlý start.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-188\">You can try this same quickstart, move directly to the next quickstart, or start again with the [Numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"a28c0-189\">Další informace najdete v tématu [řetězec interpolace](../language-reference/tokens/interpolated.md) tématu a [řetězec interpolace v jazyce C#](../tutorials/string-interpolation.md) kurzu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a28c0-189\">For more information, see the [String interpolation](../language-reference/tokens/interpolated.md) topic and the [String interpolation in C#](../tutorials/string-interpolation.md) tutorial.</span></span>"
