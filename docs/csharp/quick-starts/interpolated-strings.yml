### YamlMime:Tutorial
title: "Interpolované řetězce v jazyce C#"
metadata:
  title: "Interpolované řetězce v jazyce C#. Naučte se vytvořit řetězec, který obsahuje jiné hodnoty, jako je například kalendářní data nebo čísla."
  description: "V tomto kurzu budete používat prohlížeč interaktivně používat funkci interpolované řetězce C#. Psaní kódu jazyka C# a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: Kolekce v jazyce C#
  ms.openlocfilehash: 127365a2a20043d3597ea80743b9925537e4feba
  ms.sourcegitcommit: ed26cfef4e18f6d93ab822d8c29f902cff3519d1
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 01/17/2018
items:
- durationInMinutes: 2
  content: "Tento rychlý start se naučíte, jak používat interpolované řetězce v jazyce C# k vložení hodnoty do jednoho výstup řetězec interaktivně. Pomocí prohlížeče psaní kódu jazyka C# a okamžitě uvidíte výsledky kompilace a kód spuštěný. Rychlý start obsahuje řadu lekce, které zřetězení řetězců, vložení hodnoty do řetězce a formátování tyto hodnoty různými způsoby.\n"
- title: "Vytvoření interpolované řetězce"
  durationInMinutes: 2
  content: "Spusťte následující kód v okně interaktivní. K tomu, zadejte následující blok kódu v okně interaktivní (nahradit \"<name>\" s název) a klikněte na tlačítko **spustit** tlačítko:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nKdyž spustíte program, zobrazí jeden řetězec, který obsahuje název vaší v pozdrav. Řetězec, které jsou součástí <xref:System.Console.WriteLine%2A> volání metody, které je *interpolované řetězce*. Je typ šablony, která umožňuje vytvořit jeden řetězec (volat *způsobit řetězec*) z řetězce, který obsahuje integrovaný kód. Interpolované řetězce jsou obzvláště užitečná pro vložení hodnoty do řetězec nebo řetězce zřetězení (spojení). \n\nTento jednoduchý příklad obsahuje dva elementy, které musí mít každý interpolované řetězce: \n\n- Řetězcový literál, který začíná `$` znak před jeho otevření nabídky označit znak. Nesmí být žádné mezery mezi `$` symbolů a znak uvozovky. (Pokud byste chtěli vidět co se stane, když obsahují jeden, mezeru po vložení `$` znak v okně interaktivní a klikněte na tlačítko **spustit** tlačítko. Kompilátor jazyka C# complains, \"Neočekávaný znak\"$\"\".) \n\n- Jeden nebo více *interpolované výrazy*. Interpolované výrazu je indikován otevírací a uzavírací závorku (`{` a `}`). Můžete vložit jakékoli C# výraz, který vrací hodnotu (včetně `null`) uvnitř složené závorky. \n\nNyní si vyzkoušíte několik příkladů více interpolované řetězce s jiné datové typy.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Zahrnout různé datové typy"
  durationInMinutes: 3
  content: "V předchozí úvodní použít interpolované řetězce k vložení jednoho řetězce v rámci jiného. Výraz interpolované řetězce mohou být jakéhokoli typu dat, ale. Nyní si vyzkoušíte interpolované řetězec, který obsahuje hodnoty více datových typů. \n\nNásledující příklad obsahuje interpolované výrazy s `Vegetable` objektu, členem `Unit` výčtu <xref:System.DateTime> hodnotu a <xref:System.Decimal> hodnotu. V okně interaktivní, spusťte ji.\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nVšimněte si, že obsahuje jeden z výrazů interpolované `item` objektu ve výsledném řetězci, který se zobrazí konzole a v takovém případě je řetězec \"Lilek\" vložena do řetězce výsledek. Důvodem je, že pokud není typ výrazu interpolované řetězce, kompilátor jazyka C# provede následující akce:\n\n- Pokud je interpolované výraz `null`, interpolované výraz vrátí prázdný řetězec (\"\", nebo <xref:System.String.Empty?displayProperty=nameWithType>).\n\n- Pokud není interpolované výraz `null`, `ToString` je volána metoda typu interpolované výrazu. Toto můžete otestovat pomocí komentářů se definice `Vegetable.ToString` metoda v příkladu umístěním symbol komentáře (`//`) úrovních před ním. Ve výstupu řetězec \"Lilek\" nahrazuje plně kvalifikovaného názvu (obor názvů definované REPL C# spolu se název typu), což je výchozí chování z <xref:System.Object.ToString?displayProperty=nameWithType> metoda.   \n\nVe výstupu z tohoto příkladu datum je příliš přesné (cenu lilek nebude měnit druhou) a hodnotu ceny neznamená jednotku měny. V dalším kroku dozvíte, jak tyto problémy vyřešit kontrolou formát řetězce vrácené interpolované výrazy.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Ovládací prvek formátování interpolované výrazy"
  durationInMinutes: 5
  content: "V předchozí lekci dva řetězce chybně formátovaný byly vloženy do tabulky výsledný řetězec. Jeden se hodnoty data a času, pro kterou se příslušná pouze datum. Druhý byl ceníku, který neobsahoval pokyn jeho jednotku měny. Obě tyto chyby lze snadno adresu. Interpolované výrazy může zahrnovat *řetězce formátu* které řídí formátování konkrétní typy. Upravit volání `Console.WriteLine` z předchozího příkladu zahrnout specifikace formátu pro pole data a ceny, jak je znázorněno na následujícím řádku:\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\nPomocí následujících interpolované výraz s dvojtečkou a řetězec formátu zadáte řetězec formátu. \"d\" je [řetězec formátu standardní hodnoty data a času](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) představující formát krátkého data. Je \"C2\" [standardního řetězce formátu čísel](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) představující číslo jako hodnotu měny s dvě číslice za desetinnou čárkou.\n\nPočet typů v rozhraní .NET standardní knihovny podporují předdefinovanou sadu řetězce formátu. Mezi ně patří všechny číselnými typy a typy data a času. Úplný seznam typů, které podporují řetězce formátu najdete v tématu [řetězce formátu a typy knihovna tříd rozhraní .NET](../../standard/base-types/formatting-types.md#stringRef) v [typy formátování v .NET](../../standard/base-types/formatting-types.md) článku. Žádný typ, může podporovat sadu řetězce formátu, a také lze vytvářet vlastní rozšíření formátování, které poskytují vlastní formátování pro existující typy. Informace o vlastní formátování tím, že poskytuje <xref:System.ICustomFormatter> implementaci, najdete v části [vlastní formátování pomocí ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) v [typy formátování v .NET](../../standard/base-types/formatting-types.md) článku.\n\nZkuste upravit na formát řetězce v **.NET Editor** zobrazíte jejich vlivu formátování data a času a číselná hodnota. Změňte \"d\" v `{date:d}` k \"t\" (zobrazíte na formát krátkého času), \"y\" (zobrazíte za rok a měsíc) a \"rrrr\" (pro zobrazení v roce jako čtyřmístné číslo). Změňte \"C2\" v `{price:C2}` \"e\" (pro exponenciální zápis) a \"F3\" (pro číselná hodnota se tři číslice za desetinnou čárkou).\n\nKromě řízení, formátování, můžete také ovládat šířku pole a zarovnání vrácený výraz interpolované řetězce. V dalším kroku dozvíte, jak to provést.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Řídit šířku pole a zarovnání interpolované výrazů"
  durationInMinutes: 6
  content: "Obvykle po řetězec vrácený interpolované výrazu je zahrnutý ve výsledném řetězci, nemá žádné počáteční a koncové mezery. Platí to hlavně o instancích, ve kterých pracujete s sadu dat, interpolované výrazy umožňují určit šířku pole a jeho zarovnání. Chcete-li vidět, spusťte následující kód.\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\nNázvy položek jsou zarovnaný doleva a jejich počty zarovnaný doprava. Zadejte zarovnání přidáním čárkou (\",\") po ve výrazu a určení šířku pole. Pokud je šířka pole kladné číslo, pole je zarovnaný doprava:\n\n```text\n{expression, width}\n```\n\nPokud je šířka pole na záporné číslo, pole je zarovnaný doleva:\n\n```text\n{expression, -width}\n```\nZkuste odebrat záporné přihlásí z `{\"Item\",-25}` a `{item.Key,-25}` interpolované výrazy a znovu spusťte v příkladu. Čas, je název položky zarovnaný doprava.\n\nŠířka pole a řetězec formátu v jediném interpolované výrazu můžete kombinovat. Šířka pole je nejdříve následovaný dvojtečkou a řetězec formátu. Zkuste následující jednoduchý program, který zobrazuje tři formátované řetězce s šířky definovaných polí.\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- content: "Po dokončení rychlý start interpolované řetězce. \n\nMůžete pokračovat v těchto rychlé spuštění na místním vývojovém prostředí. Seznámíte se základy [místní vývoj](local-environment.md) a pak vyberte rychlý start. Zkuste tento stejný postup, přímo na další rychlý start nebo znovu spustit s [čísla v jazyce C#](numbers-in-csharp-local.md) rychlý start.\n\nDalší informace o práci s interpolované řetězce v [interpolované řetězce](../language-reference/keywords/interpolated-strings.md) téma v referenční dokumentace jazyka C#.\0"
