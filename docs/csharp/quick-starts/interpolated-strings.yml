### YamlMime:Tutorial
title: Interpolace řetězce v jazyce C#
metadata:
  title: Řetězec interpolace Interaktivní kurz – elementy QuickStart C#
  description: V tomto kurzu pomocí prohlížeče interaktivně prozkoumat funkce interpolace řetězec jazyka C#. Psaní kódu jazyka C# a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Kolekce v jazyce C#
  ms.openlocfilehash: 6911eeb0e7226f849e4d863d94e694fe66282b97
  ms.sourcegitcommit: 43924acbdbb3981d103e11049bbe460457d42073
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/23/2018
items:
- durationInMinutes: 2
  content: >
    Tento rychlý start se naučíte, jak používat [řetězec interpolace](../language-reference/tokens/interpolated.md) vložení hodnoty do jednoho řetězce. Můžete také zjistěte, jak řídit textové reprezentace tyto hodnoty ve výsledném řetězci. Použití prohlížeče pro zápis a spouštění kódu C# a okamžitě vidí vytvořené výsledky.
- title: Vytvoření interpolované řetězce
  durationInMinutes: 2
  content: "Spusťte následující kód v okně interaktivní. K tomu, zadejte kód v okně interaktivní (Nahraďte `\\<name>` nahraďte názvem) a vyberte **spustit**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nPři spuštění kódu, **výstup** zobrazí řetězec, který obsahuje název vaší v pozdrav. Argument řetězce <xref:System.Console.WriteLine%2A> volání metody, které je *interpolované řetězce*. Je typ šablony, která umožňuje vytvořit jeden řetězec (volat *způsobit řetězec*) z řetězce, který obsahuje integrovaný kód. Interpolované řetězce jsou obzvláště užitečná pro vložení hodnoty do řetězec nebo zřetězení (spojení) několik řetězců. \n\nV předchozím příkladu obsahuje dva elementy, které musí mít každý interpolované řetězce: \n\n- Řetězcový literál, který začíná `$` znak před jeho otevření nabídky označit znak. Nesmí být žádné mezery mezi `$` symbolů a znak uvozovky. (Pokud byste chtěli vidět co se stane, když obsahují jeden, mezeru po vložení `$` znak v okně interaktivní a spusťte aktualizovaný kódu. Kompilátor jazyka C# complains, \"Neočekávaný znak\"$\"\".) \n\n- Jeden nebo více *interpolované výrazy*. Interpolované výrazu je indikován otevírací a uzavírací závorku (`{` a `}`). Můžete vložit jakékoli C# výraz, který vrací hodnotu (včetně `null`) uvnitř složené závorky. \n\nNyní si vyzkoušíte několik další příklady interpolace řetězce, pomocí některé jiné datové typy.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: Zahrnout různé datové typy
  durationInMinutes: 5
  content: "V předchozím kroku použít řetězec interpolace vložit jeden řetězec uvnitř jiného. Výsledek interpolované výraz může být jakékoli datového typu, ale. Umožňuje zahrnout hodnoty různých datových typů v interpolované řetězce. \n\nV následujícím příkladu se nejdřív jsme definovali [– třída](../programming-guide/classes-and-structs/classes.md) datový typ `Vegetable` který má `Name` [vlastnost](../properties.md) a `ToString` [metoda](../methods.md), které [přepsání](../language-reference/keywords/override.md) chování <xref:System.Object.ToString?displayProperty=nameWithType> metoda. [ `public` – Modifikátor přístupu](../language-reference/keywords/public.md) zpřístupní dané metody žádný kód klienta získat řetězcovou reprezentaci `Vegetable` instance. V příkladu `Vegetable.ToString` metoda vrátí hodnotu `Name` vlastnost, která je inicializován v `Vegetable` [konstruktor](../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`. Poté vytvoříme instanci `Vegetable` pomocí [ `new` – klíčové slovo](../language-reference/keywords/new-operator.md) a poskytuje název parametr pro konstruktor `Vegetable`. Nakonec zahrnuta do interpolované řetězce, který taky obsahuje tuto instanci <xref:System.DateTime> hodnotu, <xref:System.Decimal> hodnotu a `Unit` [výčtu](../programming-guide/enumeration-types.md) hodnotu. V okně interaktivní spusťte následující kód:\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, pound, ounce, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\nVšimněte si, že interpolované výraz `item` interpolované řetězce přeloží na text \"Lilek\" ve výsledném řetězci. Důvodem je, že pokud typ výsledku výrazu není řetězec, výsledek je přeložit na řetězec následujícím způsobem:\n\n- Pokud je výsledkem výrazu interpolované `null`, prázdný řetězec (\"\", nebo <xref:System.String.Empty?displayProperty=nameWithType>) se používá.\n\n- Pokud není vyhodnocení interpolované výraz `null`, obvykle `ToString` je volána metoda typ výsledku. Toto můžete otestovat aktualizací implementace `Vegetable.ToString` metoda. Může i není implementovat `ToString` metoda vzhledem k tomu, že každý typ dat C# má některé implementace této metody. Otestujte, jestli, komentář definice `Vegetable.ToString` metoda v příkladu (k tomu, put symbol komentáře `//` úrovních před ním). Ve výstupu řetězec \"Lilek\" nahrazuje plně kvalifikovaného názvu (obor názvů definované REPL C# spolu se název typu), což je výchozí chování z <xref:System.Object.ToString?displayProperty=nameWithType> metoda. Výchozí chování `ToString` metodou pro typ výčtu je vrátí řetězcovou reprezentaci hodnoty použít v definici výčtu.   \n\nVe výstupu z tohoto příkladu datum je příliš přesné (cenu lilek nemění za sekundu) a hodnotu ceny neznamená jednotku měny. V dalším kroku dozvíte, jak vyřešit tyto problémy kontrolou formát řetězcové vyjádření výsledků výrazu.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: Ovládací prvek formátování interpolované výrazy
  durationInMinutes: 5
  content: >
    V předchozím kroku byly dva řetězce chybně formátovaný vložena do řetězce výsledek. Jeden se hodnoty data a času, pro kterou se příslušná pouze datum. Druhá se ceny, které nebylo signalizovat jeho jednotku měny. Obě tyto chyby lze snadno adresu. Řetězec interpolace umožňuje určit *řetězce formátu* které řídí formátování konkrétní typy. Upravit volání `Console.WriteLine` z předchozího příkladu zahrnout řetězce formátu pro data a cena výrazy, jak je znázorněno na následujícím řádku:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    Zadejte řetězec, ve formátu podle interpolované výraz s dvojtečkou (":") a řetězec formátu. "d" je [řetězec formátu standardní hodnoty data a času](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) představující formát krátkého data. Je "C2" [standardního řetězce formátu čísel](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) představující číslo jako hodnotu měny s dvě číslice za desetinnou čárkou.


    Počet typů v na knihovny .NET podporují předdefinovanou sadu řetězce formátu. Mezi ně patří všechny číselnými typy a typy data a času. Úplný seznam typů, které podporují řetězce formátu najdete v tématu [řetězce formátu a typy knihovna tříd rozhraní .NET](../../standard/base-types/formatting-types.md#stringRef) v [typy formátování v .NET](../../standard/base-types/formatting-types.md) článku.


    Zkuste upravit řetězce formátu v příkladu zobrazíte jejich vlivu formátování data a času a číselná hodnota. Změňte "d" v `{date:d}` k "t" (zobrazíte na formát krátkého času), "y" (zobrazíte za rok a měsíc) a "rrrr" (pro zobrazení v roce jako čtyřmístné číslo). Změňte "C2" v `{price:C2}` "e" (pro exponenciální zápis) a "F3" (pro číselná hodnota se tři číslice za desetinnou čárkou).


    Kromě řízení, formátování, můžete také ovládat šířku pole a zarovnání formátované řetězce, které jsou zahrnuté ve výsledném řetězci. V dalším kroku dozvíte, jak to provést.


    > [!NOTE]

    > Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).
- title: Řídit šířku pole a zarovnání interpolované výrazů
  durationInMinutes: 6
  content: >
    Normálně Pokud je výsledkem výrazu interpolované formátována na řetězec, tento řetězec je součástí výsledný řetězec bez počáteční nebo koncové mezery. Zejména při práci s sadu dat, bude možné řídit šířku pole a zarovnání textu pomáhá k vytváření srozumitelnější výstupu. Chcete-li vidět, spusťte následující kód:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Názvy položek jsou zarovnaný doleva a jejich počty zarovnaný doprava. Zadejte zarovnání přidáním čárkou (",") po interpolované výrazu a určení *minimální* pole Šířka. Pokud zadaná hodnota je kladné číslo, je pole zarovnaný doprava. Pokud je na záporné číslo, pole je zarovnaný doleva.


    Zkuste odebrat záporné přihlásí z `{"Item",-25}` a `{item.Key,-25}` kód a znovu spusťte v příkladu. Tentokrát názvy položek jsou zarovnaný doprava.


    Můžete kombinovat specifikace zarovnání a řetězec formátu pro jeden výraz interpolované. K tomu, zadejte zarovnání nejprve následovaný dvojtečkou a řetězec formátu. Zkuste následující kód, který zobrazuje tři formátované řetězce s šířky definovaných polí:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).
- content: "Jste dokončili rychlé spuštění interpolace řetězec. \n\nTyto elementy QuickStart můžete pokračovat ve svém vlastním místním vývojovém prostředí. Seznámíte se základy [místní vývoj](local-environment.md) a pak vyberte rychlý start. Zkuste tento stejný rychlý start, přímo na další rychlý start nebo znovu spustit s [čísla v jazyce C#](numbers-in-csharp-local.md) rychlý start.\n\nDalší informace najdete v tématu [řetězec interpolace](../language-reference/tokens/interpolated.md) tématu a [řetězec interpolace v jazyce C#](../tutorials/string-interpolation.md) kurzu."
