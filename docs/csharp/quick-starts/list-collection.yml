### YamlMime:Tutorial
title: Kolekce v jazyce C#
metadata:
  title: Kolekce Interaktivní kurz – elementy QuickStart C#
  description: V tomto kurzu budete používat prohlížeč další C# interaktivně. Psaní kódu jazyka C# a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči.
  audience: Developer
  ms.topic: quickstart
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 79861f7a04939fafd77bd7a905b8fef0e94b8966
  ms.sourcegitcommit: 15109844229ade1c6449f48f3834db1b26907824
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 05/07/2018
  ms.locfileid: "33805912"
items:
- durationInMinutes: 1
  content: >
    Tento rychlý start se dozvíte, jaké C# interaktivně, pomocí prohlížeče psaní kódu jazyka C# a zobrazit výsledky kompilace a kód spuštěný. Obsahuje řadu lekce, které slouží k vytváření, úpravě a prozkoumejte kolekce a pole.
- title: Vytváření seznamů
  durationInMinutes: 2
  content: >
    Spusťte následující kód v okně interaktivní. K tomu, zadejte následující blok kódu v okně interaktivní (nahradit "<name>" s název) a klikněte na tlačítko **spustit** tlačítko:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Jste právě vytvořili seznam řetězců, přidat tři názvy do tohoto seznamu a vytisknout se názvy v velká písmena. Používáte koncepty, které jste se naučili v dřívější – elementy QuickStart můžete procházet seznam.


    Kód zobrazení názvů využívá [řetězec interpolace](../language-reference/tokens/interpolated.md) funkce. Když je před `string` s `$` znak, vložením kódu C# v deklaraci řetězec. Konkrétní řetězec nahradí hodnotu, kterou generuje tento kód C#. V tomto příkladu se nahradí `{name.ToUpper()}` s každý název převeden na velká písmena, protože jste volali metodu <xref:System.String.ToUpper%2A> metoda.


    Zachovat umožňuje prohlížení.


    > [!NOTE]

    > Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).
- title: Změna seznamu obsahu
  durationInMinutes: 3
  content: >
    Kolekce, které jste vytvořili, používá <xref:System.Collections.Generic.List%601> typu. Tento typ ukládá pořadí elementů. Můžete zadat typ elementů mezi lomené závorky.


    Jeden důležitým aspektem tohoto <xref:System.Collections.Generic.List%601> typ je ho můžete zvětšit nebo zmenšit, umožňuje přidat nebo odebrat elementy. Přidejte následující kód pod kód, které jste již vytvořili:


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Přidali jste dva další názvy na konec seznamu. Můžete rovněž jsme odstranili jeden také.


    <xref:System.Collections.Generic.List%601> Umožňuje odkazovat na jednotlivé položky podle **index** také. Přístup pomocí položky `[` a `]` tokeny. Přidejte následující kód níže, jste již zapsány a vyzkoušet:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Nemáte oprávnění pro přístup za koncem seznamu. Můžete zkontrolovat, jak dlouho je pomocí seznamu <xref:System.Collections.Generic.List%601.Count%2A> vlastnost. Přidejte následující kód do vyzkoušet:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Klikněte na tlačítko **spustit** znovu a zobrazte si výsledky. V jazyce C#, indexy, které začínají hodnotou 0, takže největší platný index představuje jedno menší než počet položek v seznamu.


    > [!NOTE]

    > Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).
- title: Seznamy hledání a řazení.
  durationInMinutes: 5
  content: >
    Naše ukázky použít seznamy poměrně malý, ale aplikace může často vytvořit seznamy s mnoha další prvky, které se někdy číslování v tisíců. Elementy v těchto kolekcích větší najdete budete muset pro různé položky v seznamu Hledat. <xref:System.Collections.Generic.List%601.IndexOf%2A> Metoda vyhledá položku a vrátí index položky. Zkuste zjistíte, jak to funguje.  Přidejte následující kód níže, co jste vytvořili, pokud:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Nemusí vědět, pokud je určitá položka v seznamu, možná budete vždy index vrácený <xref:System.Collections.Generic.List%601.IndexOf%2A>. Pokud je -1, položka nebyla nalezena.


    Také lze seřadit položky v seznamu. <xref:System.Collections.Generic.List%601.Sort%2A> Metoda seřadí všechny položky v seznamu v jejich normálním pořadí (podle abecedy. v případě řetězce). Přidejte tento kód a znovu spusťte:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).
- title: Seznam dalších typů
  durationInMinutes: 5
  content: >
    Jste dosud používali `string` typu v seznamech dosavadní práce. Provedeme <xref:System.Collections.Generic.List%601> pomocí jiného typu. Vytvořme sady čísel. Odstranit kód, který jste napsali dosavadní a nahraďte ji metodou toto:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Zda vytvoří seznam celých čísel a nastaví první dva celých čísel na hodnotu 1. Jedná se o první dvě hodnoty z *Fibonacciho pořadí*, pořadí čísel. Každé další číslo Fibonacciho nachází provedením součet předchozích dvou čísel. Přidejte tento kód:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Stiskněte klávesu **spustit** a zobrazte si výsledky;


    > [!NOTE]

    > Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).
- title: výzvy
  durationInMinutes: 10
  content: >
    Pokud můžete umístit společně najdete některé koncepty z tohoto a starší lekce. Rozbalte položku na co jste vytvořili, pokud se Fibonacciho čísla. Zkuste a napsat kód pro vytvoření prvních 20 čísel v pořadí. (Jako nápovědu, je číslo 20 Fibonacciho 6765.)


    > [!NOTE]

    > Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 3
  content: "Vytvoříte přibližně toto?\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nS každou iteraci smyčky přenášíte posledních dvou celých čísel v seznamu je sčítání a přidáním této hodnoty do seznamu. Smyčky se opakuje, dokud nepřidáte 20 položky do seznamu.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- content: >-
    Jste dokončili rychlé spuštění seznamu. Tento rychlý start je poslední interaktivní rychlý start. Můžete pokračovat v těchto – elementy QuickStart na vašem vývojovém prostředí. Seznámíte se základy [místní vývoj](local-environment.md) a pak vyberte rychlý start. Zkuste tento stejný postup, přímo na další rychlý start nebo znovu spustit na s [čísla v jazyce C#](numbers-in-csharp-local.md) rychlý start.


    Další informace o práci s `List` zadejte [.NET průvodce](../../standard/index.md) téma na [kolekce](../../standard/collections/index.md). Budete také informace o mnoho dalších typů kolekce.
