### YamlMime:Tutorial
title: "<span data-ttu-id=\"dd17c-101\">Větve a smyčky</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-101\">Branches and loops</span></span>"
metadata:
  title: "<span data-ttu-id=\"dd17c-102\">Větve a smyčky</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-102\">Branches and loops</span></span>"
  description: "<span data-ttu-id=\"dd17c-103\">V této úvodní o větve a smyčky budete používat prohlížeč další C# interaktivně.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-103\">In this quick start about branches and loops, you'll use your browser to learn C# interactively.</span></span> <span data-ttu-id=\"dd17c-104\">Můžete napsat kód C# a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-104\">You'll write C# code and see the results of compiling and running your code directly in the browser.</span></span>"
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.prod: .net
  ms.technology: devlang-csharp
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: Collections in C#
  ms.openlocfilehash: fdaf016f9ed09a69724e76bb1bdcdefc785fd8a7
  ms.sourcegitcommit: 6a9030eb5bd0f00e1d144f81958adb195cfb1f6f
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 01/10/2018
items:
- durationInMinutes: 1
  content: >
    This quick start teaches you how to write code that examines variables and changes execution path based on those variables. You'll use your browser to write C# interactively and see the results of compiling and running your code. This quick start contains a series of lessons that explore branching and looping constructs in C#. These lessons teach you the fundamentals of the C# language.
- title: "<span data-ttu-id=\"dd17c-105\">Rozhodnutí, zda pomocí – příkaz</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-105\">Make decisions using the if statement</span></span>"
  durationInMinutes: 4
  content: "Run the following code in the interactive window. To do that, type the following code block in the interactive window and click the **Run** button:\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\nModify the declaration of `b` so that the sum is less than 10: \n\n```csharp\nint b = 3;\n```\n\nClick the **Run** button again. Because the answer is less than 10, nothing is printed. The **condition** you're testing is false. You don't have any code to execute because you've only\nwritten one of the possible branches for an `if` statement: the true branch.\n\n> [!TIP]\n> As you explore C# (or any programming language), you'll\n> make mistakes when you write code. The **compiler** will\n> find those errors and report them to you. When the output\n> contains error messages, look closely at the example code,\n> and the code in the interactive window to see what to fix.\n> That exercise will help you learn the structure of C# code.     \n\nThis first sample shows the power of `if` and boolean types. A *boolean* is a variable that can have one of two values: `true` or `false`. C# defines a special type, `bool` for boolean variables. The `if` statement checks the value of a `bool`. When the value is `true`, the statement following the `if` executes. Otherwise, it is skipped. \n\nThis process of checking conditions and executing statements based on those conditions is very powerful. Let's explore more.\n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "<span data-ttu-id=\"dd17c-106\">Ujistěte se, pokud a jinak spolupracují</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-106\">Make if and else work together</span></span>"
  durationInMinutes: 10
  content: "\nTo execute different code in both the true and false branches, you \ncreate an `else` branch that executes when the condition is false. Try this:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nThe statement following the `else` keyword executes only when the condition being tested is `false`. Combining `if` and `else` with boolean conditions provides all the power you need.\n\n> [!IMPORTANT]\n> The indentation under the `if` and `else` statements is for human readers.\n> The C# language doesn't treat indentation or whitespace as significant. \n> The statement following the `if` or `else` keyword will be executed based\n> on the condition. All the samples in this quick start follow a common\n> practice to indent lines based on the control flow of statements.\n\nBecause indentation is not significant, you need to use `{` and `}` to\nindicate when you want more than one statement to be part of the block\nthat executes conditionally. C# programmers typically use those braces\non all `if` and `else` clauses. The following example is the same as what you\njust created. Try it.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Through the rest of this quick start, the code samples all include the braces,\n> following accepted practices.\n\nYou can test more complicated conditions:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\nThe `&&` represents \"and\". It means both conditions must be true to execute\nthe statement in the true branch.  These examples also show that you can have multiple\nstatements in each conditional branch, provided you enclose them in `{` and `}`.\n\nYou can also use  `||` to represent \"or\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "<span data-ttu-id=\"dd17c-107\">Používat smyčky opakování operace</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-107\">Use loops to repeat operations</span></span>"
  durationInMinutes: 6
  content: "Another important concept to create larger programs is **loops**. You'll\nuse loops to repeat statements that you want executed more than once. Try\nthis code in the interactive window:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\nThe `while` statement checks a condition and executes the statement\nfollowing the `while`. It will repeat checking the condition and\nexecuting those statements until the condition is false.\n\nThere's one other new operator in this example. The `++` after\nthe `counter` variable is the **increment** operator. It adds 1\nto the value of counter, and stores that value in the counter variable.\n\n> [!IMPORTANT]\n> Make sure that the `while` loop condition does switch to\n> false as you execute the code. Otherwise, you create an\n> **infinite loop** where your program never ends. Let's\n> not demonstrate that, because the engine that runs your\n> code will time out and you'll see no output from your program.\n\nThe `while` loop tests the condition before executing the code\nfollowing the `while`. The `do` ... `while` loop executes the \ncode first, and then checks the condition. It looks like this:\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\nThis `do` loop and the earlier `while` loop work the same. \n\nLet's move on to one last loop statement.\n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "<span data-ttu-id=\"dd17c-108\">Pracovat smyčky for</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-108\">Work with the for loop</span></span>"
  durationInMinutes: 5
  content: "Another common loop statement that you'll see in C# code is the\n`for` loop. Try this code in the interactive window:\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\nThis does the same work as the `while` loop and the `do` loop you've\nalready used. The `for` statement has three parts that control\nhow it works. \n\nThe first part is the **for initializer**: `for counter = 0;` declares\nthat `counter` is the loop variable, and sets its initial value to `0`.\n\nThe middle part is the **for condition**: `counter < 10` declares that this\n`for` loop continues to execute as long as the value of counter is less than 10.\n\nThe final part is the **for iterator**: `counter++` specifies how to modify the loop\nvariable after executing the block following the `for` statement. Here, it specifies\nthat `counter` should be incremented by 1 each time the block executes.\n\nExperiment with these yourself. Try each of the following:\n\n- Change the initializer to start at a different value.\n- Change the condition to stop at a different value.\n\nWhen you're done, let's move on to write some code yourself to\nuse what you've learned.\n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "<span data-ttu-id=\"dd17c-109\">Kombinace větví a smyčky</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-109\">Combine branches and loops</span></span>"
  durationInMinutes: 12
  content: >
    Now that you've seen the `if` statement and the looping

    constructs in the C# language, see if you can write C# code to

    find the sum of all integers 1 through 20 that are divisible

    by 3.  Here are a few hints:


    - The `%` operator gives you the remainder of a division operation.

    - The `if` statement gives you the condition to see if a number should be part of the sum.

    - The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.


    Try it yourself. Then check how you did. As a hint, you should get 63 for an answer.


    > [!NOTE]

    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- title: "<span data-ttu-id=\"dd17c-110\">Dokončení výzvy</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd17c-110\">Complete challenge</span></span>"
  durationInMinutes: 1
  content: "You've completed the \"branches and loops\" quick start. \n\nYou can continue these quick starts on your own development environment. Learn the basics of [local development](local-environment.md) and then pick a quick start. You can try this same exercise, move directly to the next quick start, or start again at with the [numbers in C#](numbers-in-csharp-local.md) quickstart.\n\nYou can learn more about these concepts in these topics:\n\n[If and else statement](../language-reference/keywords/if-else.md)   \n[While statement](../language-reference/keywords/while.md)   \n[Do statement](../language-reference/keywords/do.md)   \n[For statement](../language-reference/keywords/for.md)\0"
