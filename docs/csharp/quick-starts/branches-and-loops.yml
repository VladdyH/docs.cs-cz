### YamlMime:Tutorial
title: "Větve a smyčky"
metadata:
  title: "Větve a smyčky"
  description: "V této úvodní o větve a smyčky budete používat prohlížeč další C# interaktivně. Můžete napsat kód C# a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči."
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.topic: get-started-article
  displayType: two-column
  interactive: csharp
  nextTutorialHref: interpolated-strings
  nextTutorialTitle: "Interpolované řetězce v jazyce C#"
  ms.openlocfilehash: 04fe3ae50791d3484f5f846a753aa55c6de1b01f
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 1
  content: "Tento rychlý start se naučíte, jak napsat kód, který hledá proměnné a změní cesta spuštění na základě těchto proměnných. Váš prohlížeč budete používat k zápisu C# interaktivně a zobrazit výsledky kompilace a kód spuštěný. Tento úvodní obsahuje řadu lekce, které prozkoumat větvení a opakování ve smyčce konstrukce v jazyce C#. Tyto poznatky získají naučit základy jazyka C#.\n"
- title: "Rozhodnutí, zda pomocí – příkaz"
  durationInMinutes: 4
  content: "Spusťte následující kód v okně interaktivní. K tomu, zadejte následující blok kódu v okně interaktivní a klikněte na **spustit** tlačítko:\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\nUpravit deklaraci `b` tak, aby součet menší než 10: \n\n```csharp\nint b = 3;\n```\n\nKlikněte **spustit** tlačítko znovu. Protože odpověď je menší než 10, nic vytisknout. **Podmínku** jste testování je false. Nemáte žádný kód provést, protože jste zapsat pouze jedním z možných větve pro `if` příkaz: true větev.\n\n> [!TIP]\n> Jak můžete prozkoumat jazyka C# (nebo žádný programovací jazyk), uděláte budete chyby při psaní kódu. **Kompilátoru** vyhledá tyto chyby a sestav je pro vás. Když výstup obsahuje chybové zprávy, prohlédněte si úzce příklad kódu a kódu v okně interaktivní zobrazíte co opravit.\n> Tento úkol vám pomohou naučit struktury kódu C#.     \n\nTento první příklad ukazuje možnosti `if` a boolean typy. A *boolean* je proměnná, která může mít jednu ze dvou hodnot: `true` nebo `false`. C# definuje speciální typ `bool` pro logická hodnota proměnné. `if` Příkaz kontroluje hodnotu `bool`. Pokud je hodnota `true`, následující příkaz `if` provede. Jinak se přeskočí. \n\nTento proces probíhá kontrola podmínky a provádění příkazů na základě těchto podmínek je velice mocný nástroj. Podíváme se na další.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Ujistěte se, pokud a jinak spolupracují"
  durationInMinutes: 10
  content: "\nKe spouštění různých kódu v true a false větve, vytvoříte `else` firemní pobočky, který provede, když je podmínka vyhodnocena jako false. Zkuste provést následující:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nNásledující příkaz `else` – klíčové slovo provede pouze, pokud je podmínka testuje `false`. Kombinování `if` a `else` s logickou hodnotu podmínky poskytuje všechny výkon potřebujete.\n\n> [!IMPORTANT]\n> Odsazení pod `if` a `else` příkazy je pro lidské čtečky.\n> Jazyk C# nepodporuje považovat za odsazení, nebo obsahoval mezeru významné. Následující příkaz `if` nebo `else` – klíčové slovo bude proveden podle stavu. Všechny ukázky v této úvodní podle běžnou praxí odsazovat řádky založené na toku řízení příkazů.\n\nProtože odsazení není důležité, budete muset použít `{` a `}` označte, když má více než jeden příkaz, který má být součástí blok, který provede podmíněně. Programátory v jazyce C# obvykle používají tyto složené závorky na všech `if` a `else` klauzule. Následující příklad je stejný jako co jste právě vytvořili. Vyzkoušejte.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Procházení zbývající části této úvodní, ukázky kódu, všechny zahrnují složené závorky, následující přijata postupy.\n\nMůžete otestovat složitější podmínky:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n`&&` Představuje \"a\". Znamená to, že musí být splněny příkaz nelze provést ve větvi true obě podmínky.  Tyto příklady také ukazují, že můžete mít více příkazů v každé větve podmíněného zadaný uzavřete je v `{` a `}`.\n\nMůžete také použít `||` představují \"nebo\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Používat smyčky opakování operace"
  durationInMinutes: 6
  content: "Další důležité koncept vytvořit větší programy je **smyčky**. Použijete smyčky opakování příkazy, které chcete spustit více než jednou. Zkuste tento kód v okně interaktivní:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\n`while` Příkaz kontroluje podmínku a provede následující příkaz `while`. Bude se opakovat kontrolu stavu a provádění tyto příkazy, dokud je podmínka vyhodnocena jako false.\n\nV tomto příkladu je jeden další nové operátor. `++` Po `counter` proměnná **přírůstek** operátor. Přidá 1 na hodnotu čítače a uloží tuto hodnotu do proměnné čítače.\n\n> [!IMPORTANT]\n> Ujistěte se, že `while` smyčku přepnout na hodnotu false, při spuštění kódu. Jinak, vytvoříte **nekonečná smyčka** které nikdy končí vašeho programu. Pojďme není ukazují, že vzhledem k tomu modul, který běží váš kód bude časový limit a zobrazí se žádný výstup z programu.\n\n`while` Smyčky testuje podmínku před provedením následující kód `while`. `do` ... `while` smyček nejprve spustí kód a pak kontroluje podmínku. Vypadá takto:\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\nTo `do` smyčky a dříve `while` smyčky fungovat stejně. \n\nMůžeme přesunout k jedné poslední příkaz smyčky.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Pracovat smyčky for"
  durationInMinutes: 5
  content: "Další běžné smyčky příkaz, který se zobrazí v C# – kód je `for` smyčky. Zkuste tento kód v okně interaktivní:\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\nFunguje jako `while` smyčky a `do` smyčky jste už použili. `for` Příkaz má tři části, které řídí, jak to funguje. \n\nPrvní část je **pro inicializátoru**: `for counter = 0;` uvádí, že `counter` je proměnná smyčky a nastaví počáteční hodnoty `0`.\n\nStřední část je **pro podmínku**: `counter < 10` deklaruje, že tato `for` smyčce bude pokračovat v provádění, dokud hodnota čítače je menší než 10.\n\nPoslední část je **pro iterator**: `counter++` Určuje, jak upravit proměnnou smyčky po provedení těchto bloku `for` příkaz. Zde, určuje, že `counter` by se zvýší o 1 pokaždé, když provádí bloku.\n\nExperimentujte s sami. Zkuste každou z následujících:\n\n- Změňte inicializátoru spustit na jinou hodnotu.\n- Změňte stav kdykoli zastavit jinou hodnotu.\n\nKdyž jste hotovi, můžeme přesunout k zápisu některé sami používat co když jste se naučili kódu.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Kombinace větví a smyčky"
  durationInMinutes: 12
  content: "Teď, když jste viděli `if` prohlášení a opakování konstrukce v jazyce C#, najdete v části Pokud můžete napsat kód C# k vyhledání součet všech celá čísla 1 až 20, které jsou dělitelná 3.  Tady je několik pomocných parametrů:\n\n- `%` Operátor vám dává zbytek operace dělení.\n- `if` Příkaz vám dává stav chcete zobrazit, pokud číslo musí být součástí součet.\n- `for` Smyčky vám může pomoct opakujte sérii kroků pro všechna čísla 1 až 20.\n\nVyzkoušejte si to. Potom zkontrolujte, jak jste to udělali. Jako nápovědu měli byste obdržet 63 pro odpověď.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Dokončení výzvy"
  durationInMinutes: 1
  content: "Po dokončení \"větví a cyklu\" rychlý start. \n\nMůžete pokračovat v těchto rychlé spuštění na vašem vývojovém prostředí. Seznámíte se základy [místní vývoj](local-environment.md) a pak vyberte rychlý start. Zkuste tento stejný postup, přímo na další rychlý start nebo znovu spustit na s [čísla v jazyce C#](numbers-in-csharp-local.md) rychlý start.\n\nDalší informace o těchto konceptech v těchto tématech:\n\n[Pokud a else – příkaz](../language-reference/keywords/if-else.md)   \n[While – příkaz](../language-reference/keywords/while.md)   \n[Do – příkaz](../language-reference/keywords/do.md)   \n[For – příkaz](../language-reference/keywords/for.md)\0"
