### YamlMime:Tutorial
title: Větve a smyčky
metadata:
  title: Větve a smyčky Interaktivní kurz – rychlé starty s C#
  description: V tomto rychlém startu o větvích a smyčkách použijete prohlížeče interaktivně učit C#. Budete psát kód v C# a zobrazovat výsledky kompilace a spuštění prohlédnete přímo v prohlížeči.
  audience: Developer
  level: Beginner
  ms.topic: quickstart
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: interpolated-strings.yml
  nextTutorialTitle: Interpolace řetězců v jazyce C#
  ms.openlocfilehash: d214fe9a2b2e7c634c79fa7aac96136a77415e09
  ms.sourcegitcommit: 2eceb05f1a5bb261291a1f6a91c5153727ac1c19
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 09/04/2018
  ms.locfileid: "43506709"
items:
- durationInMinutes: 1
  content: >
    V tomto rychlém startu se naučíte, jak napsat kód, který vyhodnocuje proměnné a na jejich základě mění cestu provedení. Zápis C# interaktivně a zobrazovat výsledky kompilace a spuštění kódu budete pomocí svého prohlížeče. Tento rychlý Start obsahuje posloupnost lekcí, které probírají konstrukty v jazyce C# větvení a smyček. Tato lekce vás naučí základy jazyka C#.
- title: Rozhodování pomocí příkazu if – příkaz
  durationInMinutes: 4
  content: "Spusťte v interaktivním okně následující kód. K tomu, zadejte do interaktivního okna následující blok kódu a klikněte na tlačítko **spustit** tlačítka:\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\nUpravte deklaraci `b` tak, aby součet je menší než 10: \n\n```csharp\nint b = 3;\n```\n\nKlikněte na tlačítko **spustit** tlačítko znovu. Protože odpověď je menší než 10, nic se nevytiskne. **Podmínku** jste testování má hodnotu false. Nemáte žádný kód spustit, protože jste zatím napsali jenom jednu z možných větví `if` – příkaz: větev pro splnění podmínky.\n\n> [!TIP]\n> Když se budete učit, C# (nebo libovolným programovacím jazykem), budete se při psaní kódu dělat chyby. **Kompilátoru** se tyto chyby odhalí a dejte nám o nich na vás. Pokud výstup obsahuje chybové zprávy, prohlédněte si blíže ukázkový kód a kód v interaktivním okně, abyste zjistili, co je opravit.\n> Toto cvičení vám pomůže seznámit se se strukturou kódu jazyka C#.     \n\nTento první příklad ukazuje sílu příkazu `if` a logických typů. A *logická* je proměnná, která může mít jednu ze dvou hodnot: `true` nebo `false`. C# definuje speciální typ `bool` pro proměnné typu boolean. `if` Příkaz zkontroluje hodnotu vlastnosti `bool`. Pokud je hodnotou `true`, příkazu za příkazem `if` spustí. V opačném případě se přeskočí. \n\nTento proces kontroly podmínek a provádění příkazů na základě těchto podmínek je velmi výkonné. Podívejme se na další.\n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: If a else spolupracují
  durationInMinutes: 10
  content: "\nChcete-li ve větvích true a false provést různý kód, vytvoříte `else` větev, která se provede, když podmínka není splněna. Zkuste tohle:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nNásledující příkaz `else` – klíčové slovo provede pouze, pokud je testovaná podmínka `false`. Kombinování `if` a `else` s logickými podmínkami poskytuje veškerou sílu, budete potřebovat.\n\n> [!IMPORTANT]\n> Důvodem odsazení pod `if` a `else` příkazy je snadnější čtení pro uživatele.\n> Jazyk C# nepovažuje odsazení a mezery za významné. Následující příkaz `if` nebo `else` – klíčové slovo se spustí na základě podmínky. Všechny ukázky v tomto rychlém startu dodržují běžnou praxi odsazování řádků podle toku řízení příkazů.\n\nProtože odsazení není významné, je třeba použít `{` a `}` označte, když má více než jeden výraz jako součást podmíněně prováděného bloku. Programátoři v C# obvykle používají tyto složené závorky ve všech `if` a `else` klauzule. Následující příklad je stejný jako co jste právě vytvořili. Vyzkoušejte si to.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Postupujte podle zbývajících kroků v tomto rychlém startu obsahují ukázky složené závorky podle přijaté praxe.\n\nMůžete testovat složitější podmínky:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n`&&` Představuje \"a\". Znamená to, že obě podmínky musí mít hodnotu true, má provést větev true.  Tyto příklady také ukazují, že můžete mít více příkazů v každé podmíněné větvi, je v uzavřete `{` a `}`.\n\nMůžete také použít `||` představující \"nebo\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Použití smyček k opakování operací
  durationInMinutes: 6
  content: "Dalším důležitým konceptem pro vytváření větších programů je **smyčky**. Smyčky použijete k opakování příkazů, které chcete provést víckrát než jednou. Vyzkoušejte tento kód v interaktivním okně:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\n`while` Příkaz zkontroluje podmínku a provede příkaz následující `while`. Bude opakovaně kontrolovat podmínku a provádět příkaz, dokud podmínka není splněna.\n\nV tomto příkladu je jeden nový operátor. `++` Po `counter` proměnná je **přírůstek** operátor. Přičte 1 k hodnotě čítače a uloží hodnotu do proměnné counter.\n\n> [!IMPORTANT]\n> Ujistěte se, že `while` smyčku přepne na false, při spuštění kódu. V opačném případě můžete vytvořit **nekonečná smyčka** kde program nikdy neskončí. Není přiblížíme, protože modul, který spustí váš kód bude vypršení časového limitu a uvidíte žádný výstup z programu.\n\n`while` Smyčky otestuje podmínku před spuštěním kódu, který následuje `while`. `do` ... `while` smyčky nejdřív spustí kód a potom zkontrolujte tuto podmínku. Vypadá takto:\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\nTo `do` smyčky a dřívější `while` smyčky fungují stejně. \n\nTeď přejdeme k poslednímu příkazu smyčky.\n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Práce s smyčka for
  durationInMinutes: 5
  content: "Dalím běžným příkazem smyčky, která se zobrazí v kódu jazyka C# je `for` smyčky. Vyzkoušejte tento kód v interaktivním okně:\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\nFunguje jako `while` smyčky a `do` smyčky, které jste už použili. `for` Příkaz má tři části, které řídí, jak to funguje. \n\nPrvní část je **pro inicializátor**: `for counter = 0;` deklaruje, že `counter` je proměnná smyčky a nastavuje její počáteční hodnotu `0`.\n\nProstřední část je **pro podmínku**: `counter < 10` deklaruje, že tento `for` smyčky pokračuje v provádění za předpokladu, hodnota čítače je menší než 10.\n\nPoslední část je **iterátoru**: `counter++` Určuje, jak upravit proměnnou smyčky po provedení bloku následujícího `for` příkazu. V tomto poli, určuje, že `counter` měli zvyšuje o 1 při každém provedení bloku.\n\nVyzkoušet sami. Vyzkoušejte všechny z následujících akcí:\n\n- Změňte inicializační začínal jinou hodnotou.\n- Změňte podmínku, která má zastavit na jinou hodnotu.\n\nAž skončíte, přejdeme napsali kus kódu sami používat, co jste se naučili.\n\n> [!NOTE]\n> Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Kombinace větví a smyček
  durationInMinutes: 12
  content: >
    Teď, když už víte, `if` příkazu a konstruktory cyklů v jazyce C# najdete v části Pokud můžete napsat kód jazyka C# pro zjistí součet všech celých čísel od 1 do 20, která jsou dělitelná 3.  Tady je několik tipů:


    - `%` Operátor poskytuje zbytek operace dělení.

    - `if` Příkaz poskytuje podmínku pro zjištění, pokud se číslo by mělo být součástí tohoto součtu.

    - `for` Smyčky pomůže zopakovat sérii kroků pro všechna čísla od 1 do 20.


    Vyzkoušejte si to sami. Zkontrolujte, jak jste to udělali. Jako Nápověda měli byste obdržet 63 pro odpověď.


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Dokončení výzvy
  durationInMinutes: 1
  content: >
    Napsali jste kód podobný tomuto?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > Toto online kódovací prostředí je v režimu náhledu. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet/try](https://github.com/dotnet/try/issues).
- title: Blahopřejeme!
  content: "Dokončili jste rychlý start \"větve a smyčky\". \n\nV těchto rychlých startech můžete pokračovat ve svém vlastním vývojovém prostředí. Seznamte se se základy [místního vývojového](local-environment.md) a potom si vyberte rychlý start. Vyzkoušejte to samé cvičení, přejít přímo k dalšímu rychlému startu nebo znovu začít rychlým [čísla v C#](numbers-in-csharp-local.md) rychlý start.\n\nDalší informace o těchto konceptech v těchto tématech:\n\n[Pokud a else – příkaz](../language-reference/keywords/if-else.md)   \n[while – příkaz](../language-reference/keywords/while.md)   \n[do – příkaz](../language-reference/keywords/do.md)   \n[For – příkaz](../language-reference/keywords/for.md)"
