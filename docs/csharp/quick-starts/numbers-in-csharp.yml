### YamlMime:Tutorial
title: "Čísla v jazyce C#"
metadata:
  title: "Čísla v jazyce C#"
  description: "V této úvodní o číselnými typy budete používat prohlížeč další C# interaktivně. Budete psát kód C# a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: Branches and loops in C#
  displayType: two-column
  interactive: csharp
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.openlocfilehash: 8c89963107a770e27c9345ee38ed6249a8177f02
  ms.sourcegitcommit: 6a9030eb5bd0f00e1d144f81958adb195cfb1f6f
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 01/10/2018
items:
- durationInMinutes: 1
  content: >
    This quick start teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code. It contains a series of lessons that explore numbers and math operations in C#. These lessons teach you the fundamentals of the C# language.
- title: "Prozkoumejte matematické celé číslo"
  durationInMinutes: 4
  content: "Run the following code in the interactive window. To do that, type the following code block in the interactive window and click the **Run** button:\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\nYou've just seen one of the fundamental math operations with integers. The `int` type represents an **integer**, a positive or negative whole number. You use the `+` symbol for addition. Other common mathematical operations for integers include:\n\n- `-` for subtraction\n- `*` for multiplication\n- `/` for division\n\n> [!TIP]\n> Throughout this quick start, you can explore on your own by modifying the code you've written in the interactive window. This quick start provides examples that you can try at each step.\n\nStart by exploring those different operations. Modify the third line to try each of these operations. After each edit, click the **Run** button.\n\nSubtraction:\n\n```csharp\nint c = a - b;\n```\n\nMultiplication:\n\n```csharp\nint c = a * b;\n```\n\nDivision: \n\n```csharp\nint c = a / b;\n```\n\nYou can also experiment by performing multiple mathematics operations in the same line, if you'd like.\n\n> [!TIP]\n> As you explore C# (or any programming language), you'll\n> make mistakes when you write code. The **compiler** will\n> find those errors and report them to you. When the output\n> contains error messages, look closely at the example code,\n> and the code in the interactive window to see what to fix.\n> That exercise will help you learn the structure of C# code.     \n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "Prozkoumejte pořadí operací"
  durationInMinutes: 7
  content: >
    The C# language defines the precedence of different mathematics operations

    with rules consistent with the rules you learned in mathematics.

    Multiplication and division take precedence over addition and subtraction.

    Explore that by running the following code in the interactive window:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    The output demonstrates that the multiplication is performed before the addition.


    You can force a different order of operation by adding parentheses around

    the operation or operations you want performed first:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a  + b) * c;

    Console.WriteLine(d);

    ```


    Explore more by combining many different operations. Replace the fourth line above with something like this:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    You may have noticed an interesting behavior for integers. Integer

    division always produces an integer result, even when you'd expect

    the result to include a decimal or fractional portion.


    If you haven't seen this behavior, try the following:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    Click **Run** again to see the results.


    > [!NOTE]

    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- title: "Prozkoumejte přesnost celé číslo a omezení"
  durationInMinutes: 5
  content: "That last sample showed you that integer division truncates the result.\nYou can get the **remainder** by using the **modulo** operator, the `%` character:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nThe C# integer type differs from mathematical integers in one other\nway: the `int` type has minimum and maximum limits. Run this code\nin the interactive window to see those limits:\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\nIf a calculation produces a value that exceeds those limits, you\nhave an **underflow** or **overflow** condition. The answer appears\nto wrap from one limit to the other. Add these two lines to the interactive\nwindow to see an example:\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\nNotice that the answer is very close to the minimum (negative) integer. It's\nthe same as `min + 2`. \nThe addition operation **overflowed** the allowed values for integers.\nThe answer is a very large negative number because an overflow \"wraps around\"\nfrom the largest possible integer value to the smallest.\n\nThere are other numeric types with different limits and precision that you\nwould use when the `int` type doesn't meet your needs. Let's explore those next.\n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "Práce s typ double"
  durationInMinutes: 5
  content: "The `double` numeric type represents a double-precision floating point\nnumber. Those terms may be new to you. A **floating point** number is\nuseful to represent non-integral numbers that may be very large or small\nin magnitude. **Double-precision** means that these numbers are stored\nusing greater precision than **single-precision**. On modern computers,\nit is more common to use double precision than single precision numbers.\nLet's explore. Try the following code in the interactive window and see the result:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nNotice that the answer includes the decimal portion of the quotient. Try a slightly\nmore complicated expression with doubles:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nThe range of a double value is much greater than integer values. Try the following\ncode in the interactive window:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nThese values are printed out in scientific notation. The number to\nthe left of the `E` is the significand. The number to the right is the exponent,\nas a power of 10. \n\nJust like decimal numbers in math, doubles in C# can have rounding errors. Try this code:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nYou know that `0.3` repeating is not exactly the same as `1/3`.\n\n***Challenge***\n\nTry other calculations with large numbers, small numbers, multiplication\nand division using the `double` type.  Try more complicated calculations.\n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n"
- title: "Práce s pevnou bodu typy"
  durationInMinutes: 8
  content: "You've seen the basic numeric types in C#: integers and doubles.  There is one\nother type to learn: the `decimal` type. The `decimal` type has a smaller\nrange but greater precision than `double`. The term **fixed point** means\nthat the decimal point (or binary point) doesn't move. Let's take a look:\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\nNotice that the range is smaller than the `double` type. You can see the greater\nprecision with the decimal type by trying the following code:\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\nThe `M` suffix on the numbers is how you indicate that a constant should use the\n`decimal` type.\n\nNotice that the math using the decimal type has more digits to the right\nof the decimal point. \n\n***Challenge***\n\nNow that you've seen the different numeric types, write code that calculates\nthe area of a circle whose radius is 2.50 inches. Remember that the area of a circle\nis the radius squared multiplied by PI. One hint: .NET contains a constant\nfor PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value. \n\n> [!NOTE]\n> This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).\n\nYou should get an answer between 19 and 20.\n"
- title: "Dokončení výzvy"
  durationInMinutes: 1
  content: >
    Did you come up with something like this?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Try some other formulas if you'd like.


    > [!NOTE]

    > This online coding experience is in preview mode. If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).
- content: "You've completed the \"Numbers in C#\" quick start. \n\nYou can continue these quick starts on your own development environment. Learn the basics of [local development](local-environment.md) and then pick a quick start. You can try this same exercise, move directly to the next quick start, or start again at with the [numbers in C#](numbers-in-csharp-local.md) quickstart.\n\nYou can learn more about numbers in C# in the following topics:\n\n[Integral Types Table](../language-reference/keywords/integral-types-table.md)   \n[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md)   \n[Built-In Types Table](../language-reference/keywords/built-in-types-table.md)   \n[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[Explicit Numeric Conversions Table](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
