### YamlMime:YamlDocument
documentType: Tutorial
title: "Čísla v jazyce C#"
metadata:
  title: "Čísla v jazyce C#"
  description: "V této úvodní o číselnými typy budete používat prohlížeč další C# interaktivně. Budete psát kód C# a zobrazit výsledky kompilace a spuštění kódu přímo v prohlížeči."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "Větve a smyčky v jazyce C#"
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 10dc4bf0e2a0ef6fc04d062204a3005fba1ab8d3
  ms.sourcegitcommit: 9bee08539b1886c9d57fa3d5bd8a58dfdd7cad94
  ms.translationtype: MT
  ms.contentlocale: cs-CZ
  ms.lasthandoff: 12/12/2017
items:
- durationInMinutes: 1
  content: "Tento rychlý start se dozvíte, jaké číslo typy v jazyku C# interaktivně, pomocí prohlížeče zápisu C# a zobrazit výsledky kompilace a kód spuštěný. Obsahuje řadu lekce, které prozkoumat matematické operace v jazyce C# a čísla. Tyto poznatky získají naučit základy jazyka C#.\n"
- title: "Prozkoumejte matematické celé číslo"
  durationInMinutes: 4
  content: "Spusťte následující kód v okně interaktivní. K tomu, zadejte následující blok kódu v okně interaktivní a klikněte na **spustit** tlačítko:\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\nSeznámili jste se právě jeden z základní matematické operace s celými čísly. `int` Zadejte představuje **celé číslo**, kladné a záporné celé číslo. Můžete použít `+` symbol pro přidání. Další běžné matematické operace pro celá čísla zahrnují:\n\n- `-`pro odčítání\n- `*`pro násobení\n- `/`pro dělení\n\n> [!TIP]\n> V rámci této úvodní můžete prozkoumat sami změnou kód, který jste vytvořili v okně interaktivní. Tento úvodní obsahuje příklady, které můžete použít při každém kroku.\n\nZačít seznamovat se tyto jiné operace. Třetí řádek pro každou z těchto operací zkuste upravte. Po každé úpravě, klikněte **spustit** tlačítko.\n\nOdčítání:\n\n```csharp\nint c = a - b;\n```\n\nNásobení:\n\n```csharp\nint c = a * b;\n```\n\nDělení: \n\n```csharp\nint c = a / b;\n```\n\nMůžete vyzkoušet tak, že provedete více operací Matematika na stejném řádku, pokud vás zajímají.\n\n> [!TIP]\n> Jak můžete prozkoumat jazyka C# (nebo žádný programovací jazyk), uděláte budete chyby při psaní kódu. **Kompilátoru** vyhledá tyto chyby a sestav je pro vás. Když výstup obsahuje chybové zprávy, prohlédněte si úzce příklad kódu a kódu v okně interaktivní zobrazíte co opravit.\n> Tento úkol vám pomohou naučit struktury kódu C#.     \n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Prozkoumejte pořadí operací"
  durationInMinutes: 7
  content: "Jazyk C# definuje prioritu různých Matematika operací s pravidly konzistentní s pravidly, že jste se naučili v Matematika.\nNásobení a dělení mají přednost před sčítání a odečítání.\nProzkoumejte, tak, že spustíte následující kód v okně interaktivní:\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\nVýstup ukazuje, že násobení se provádí před přidání.\n\nMůžete vynutit jiném pořadí operace přidáním v závorkách operaci nebo operace, které chcete provést nejdřív:\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\nProzkoumejte více kombinací mnoha různých operací. Čtvrtý řádek výše nahraďte přibližně takto:\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\nMožná jste si všimli zajímavé chování celých čísel. Celočíselné dělení vždy vytvoří celé číslo, i v případě, že by uživatel očekával výsledek, který má zahrnout desetinné nebo zlomkové části.\n\nPokud toto chování ještě neviděli, zkuste následující postup:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nKlikněte na tlačítko **spustit** znovu a zobrazte si výsledky.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Prozkoumejte přesnost celé číslo a omezení"
  durationInMinutes: 5
  content: "Tento posledního vzorku vám ukázal, že celočíselné dělení zkrátí výsledek.\nMůžete získat **zbývající** pomocí **modulo** operátor, `%` znak:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nTyp integer jazyka C# se liší od matematickém celých čísel jeden jiným způsobem: `int` typ má minimální a maximální meze. Spusťte tento kód v interaktivních okna, zobrazí tato omezení:\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\nPokud výpočtu slouží k vytvoření hodnoty, které tato omezení překročí, máte **podtečení** nebo **přetečení** podmínku. Zdá se, že odpověď zabalení z limitu jeden na druhý. Přidejte tyto dva řádky do okna interaktivní zobrazíte příklad:\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\nVšimněte si, že odpověď je velmi brzy bude dosaženo minimální (záporné) celé číslo. Je stejný jako `min + 2`. Operace přidání **došlo k přetečení** povolené hodnoty pro celá čísla.\nOdpověď je velmi velké záporné číslo, protože přetečení \"obtéká\" z největší možné celočíselnou hodnotu po nejmenší.\n\nExistují další číselnými typy s jinou omezení a přesnost, že by se použijte, když `int` typ nevyhovuje vašim potřebám. Podíváme se na tyto další.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Práce s typ double"
  durationInMinutes: 5
  content: "`double` Číselného typu představuje číslo s plovoucí desetinnou dvojitou přesností. Tyto podmínky může být pro vás nový. A **plovoucí desetinnou čárkou** číslo je užitečné k reprezentaci bez integrální čísla, která může být velmi velké nebo malé řádově. **Dvojitá přesnost** znamená, že tato čísla ukládat pomocí přesností větší než **jednoduchou přesností**. Na počítačích moderní je dnes běžné používat Dvojitá přesnost než čísla s jednoduchou přesností.\nPodíváme se na. Zkuste následující kód v okně interaktivní a zobrazit výsledky:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nVšimněte si, že odpověď obsahuje desetinná část podílu. Zkuste něco víc složitý výraz s hodnoty Double:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nRozsah hodnota typu double je mnohem větší než celočíselné hodnoty. Zkuste následující kód v okně interaktivní:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nTyto hodnoty jsou vytiskne v exponenciální notace. Číslo směrem doleva od `E` je mantisy. Číslo, které má právo je exponent, jako druhou mocninou 10. \n\nStejně jako desetinná čísla v matematické může mít hodnoty Double v jazyce C# zaokrouhlení chyby. Zkuste tento kód:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nVíte, že `0.3` opakující se právě není stejný jako `1/3`.\n\n***Výzvy***\n\nZkuste jiné výpočty s velká čísla, malá čísla, násobení a dělení pomocí `double` typu.  Zkuste složitější výpočty.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- title: "Práce s pevnou bodu typy"
  durationInMinutes: 8
  content: "Seznámili jste se základní číselnými typy v jazyku C#: celá čísla a hodnoty Double.  Neexistuje jeden další typ. Další: `decimal` typu. `decimal` Typ má menší oblast ale přesností větší než `double`. Termín **pevné bodu** znamená, že se nepřesune desetinné čárky (nebo binární bodu). Podívejme se:\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\nVšimněte si, že rozsah je menší, než `double` typu. Větší přesnost s typ decimal, můžete zjistit tak, že zkusíte následující kód:\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n`M` Příponu na čísla, která je, jak můžete označit, že by měl použít konstanta `decimal` typu.\n\nVšimněte si, že výpočty pomocí typu decimal obsahuje více číslic vpravo od desetinné čárky. \n\n***Výzvy***\n\nTeď, když jste se seznámili s různými typy číselné, napište kód, který vypočítá oblasti jejichž radius je 2.50 palce kruh. Mějte na paměti, že oblast kruhu je radius spolehlivosti násobí hodnotou platformy. Jeden pomocný parametr: .NET obsahuje konstanty pro platformy, <xref:System.Math.PI?displayProperty=nameWithType> , můžete použít pro tuto hodnotu. \n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n\nMěli byste obdržet odpověď až 19, 20.\n"
- title: "Dokončení výzvy"
  durationInMinutes: 1
  content: "Vytvoříte přibližně toto?\n\n```csharp\ndouble radius = 2.50;\ndouble area = Math.PI * radius * radius;\nConsole.WriteLine(area);\n```\n\nPokud chcete, zkuste některé jiné vzorce.\n\n> [!NOTE]\n> Toto online kódování prostředí je v režimu preview. Pokud narazíte na potíže, nahlaste je [v úložišti dotnet nebo zkuste](https://github.com/dotnet/try/issues).\n"
- content: "Po dokončení \"čísla v C#\" rychlý start. \n\nMůžete pokračovat v těchto rychlé spuštění na vašem vývojovém prostředí. Seznámíte se základy [místní vývoj](local-environment.md) a pak vyberte rychlý start. Zkuste tento stejný postup, přímo na další rychlý start nebo znovu spustit na s [čísla v jazyce C#](numbers-in-csharp-local.md) rychlý start.\n\nDalší informace o čísla v jazyce C# v následujících tématech:\n\n[Tabulka celočíselných typů](../language-reference/keywords/integral-types-table.md)   \n[Tabulka typů s plovoucí desetinnou čárkou](../language-reference/keywords/floating-point-types-table.md)   \n[Tabulka předdefinovaných typů](../language-reference/keywords/built-in-types-table.md)   \n[Tabulka implicitních číselných převodů](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[Tabulka explicitních číselných převodů](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
